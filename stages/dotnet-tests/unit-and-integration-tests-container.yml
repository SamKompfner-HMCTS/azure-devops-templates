parameters:
  - name: nugetConfigPath
    type: string
    default: nuget.config
  - name: appName
    type: string
  - name: dockerComposeTestFile
    type: string
    default: docker-compose.tests.yml
  - name: publishNodeTests
    type: boolean
    default: false
  - name: nodeTestResultFolder
    type: string
    default: "" # Example would be $(System.DefaultWorkingDirectory)/<AppName>/<AppName>/ClientApp

steps:

  - task: PowerShell@2
    displayName: Run Unit & Integration Tests
    inputs:
      scriptType: pscore
      scriptLocation: 'inlineScript'
      inlineScript: |
        $dockerComposeTestFile = "docker-compose.test.yml"
        $repositoryName =  $("Build.Repository.Name")
        $dockerComposeCommand = "up"
        $arguments = "--build --abort-on-container-exit"

        Write-Host "Running Unit & Integration Tests using Docker Compose"
        $command = "docker-compose -f $dockerComposeTestFile -p $repositoryName $dockerComposeCommand $arguments"
        Write-Host "Executing: $command"
        Invoke-Expression $command


  - bash: |
      sourcesDirectory="$(Build.SourcesDirectory)"
      coverageReport="$(System.DefaultWorkingDirectory)/Coverage/coverage.opencover.xml"
      content=$(cat $coverageReport)

      echo $content > "$(System.DefaultWorkingDirectory)/coverage.opencover.xml"
      sed -i "s|\/app|$sourcesDirectory|g" "$(System.DefaultWorkingDirectory)/coverage.opencover.xml"
    displayName: Replace Coverage File Paths
    workingDirectory: $(System.DefaultWorkingDirectory)

  - task: PublishCodeCoverageResults@1
    displayName: "Publish Code Coverage Report"
    inputs:
      codeCoverageTool: "Cobertura"
      pathToSources: $(Build.SourcesDirectory)
      summaryFileLocation: "$(System.DefaultWorkingDirectory)/**/coverage.cobertura.xml"

  - task: PublishTestResults@2
    displayName: Publish API Test Results
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: "VSTest" # Options: JUnit, NUnit, VSTest, xUnit, cTest
      testResultsFiles: "**/*TestResults.trx"
      failTaskOnFailedTests: true

  - ${{ if eq(parameters.publishNodeTests, true) }}:
      - task: PublishTestResults@2
        displayName: Publish Jasmine Test Results
        condition: eq(${{ parameters.publishNodeTests }}, true)
        inputs:
          testResultsFormat: "JUnit" # Options: JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: "**/TESTS.xml"
          searchFolder: ${{ parameters.nodeTestResultFolder }}
          failTaskOnFailedTests: true
