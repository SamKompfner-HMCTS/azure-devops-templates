parameters:
  - name: subscriptionName
    type: string
  - name: product
    type: string
  - name: environment
    type: string
  - name: domain
    type: string

steps:
  - task: AzureCLI@2
    displayName: 'Request LE Cert for ${{ parameters.domain }}'
    inputs:
      azureSubscription: '${{ parameters.subscriptionName }}'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        mkdir "$(Build.SourcesDirectory)\certs"
        $workingDirectory="$(Build.SourcesDirectory)\certs"

        $product="${{ parameters.product }}"
        $env="${{ parameters.environment }}"
        $domain="${{ parameters.domain }}"
        $acmeContact="$product@$env.com"

        if ($env -eq "prod") {
          $leServer="LE_PROD"
        }else {
          $leServer="LE_STAGE"
        }
        $pfxPassword="poshacme" # This is fixed by the module. Do not change

        # Set Posh-ACME working directory
        Write-Host "Install Module"
        $env:POSHACME_HOME = $workingDirectory
        Install-Module -Name Posh-ACME -Scope CurrentUser -Force

        # Configure Posh-ACME server
        Write-Host "Configure LE Server $leServer"
        Set-PAServer $leServer
        Get-PAPlugin Azure # -Guide

        # Configure Posh-ACME account
        Write-Host "Setup Account"
        $account = Get-PAAccount
        if (-not $account) {
            # New account
            Write-Host "Create New Account"
            $account = New-PAAccount -Contact $acmeContact -AcceptTOS
        }
        elseif ($account.contact -ne "mailto:$acmeContact") {
            # Update account contact
            Write-Host "Set Existing Account $($account.id)"
            Set-PAAccount -ID $account.id -Contact $acmeContact
        }

        # Acquire access token for Azure (as we want to leverage the existing connection)
        Write-Host "Get Azure Details"
        $azAccount = az account show -s "Reform-CFT-Mgmt" -o json | ConvertFrom-Json
        Write-Host "Azure DNS Sub $($azAccount.name)"
        $token = (az account get-access-token --resource 'https://management.core.windows.net/' | ConvertFrom-Json).accessToken

        # Request certificate
        $pArgs = @{
          AZSubscriptionId = $azAccount.id
          AZAccessToken = $token
        }
        New-PACertificate $domain -Plugin Azure -PluginArgs $pArgs -Verbose

        Get-PACertificate | Format-List


