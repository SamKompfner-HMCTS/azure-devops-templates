parameters:
  - name: environment
    type: string

  - name: testFilterCriteria
    type: string
    default: ''

  - name: acceptanceTestSettings
    type: object

  - name: azureSubscription
    type: string

steps:
  - checkout: self

  - task: DownloadPipelineArtifact@2
    displayName: Download Acceptance Tests
    inputs:
      artifact: AcceptanceTests
      path: $(Pipeline.Workspace)/AcceptanceTests-$(Build.BuildId)

  - powershell: |
      $runtimeSettings = '<?xml version="1.0" encoding="utf-8"?><RunSettings><TestRunParameters><Parameter name="TargetEnvironment" value="Production"/></TestRunParameters></RunSettings>'
      Write-Host "Runtime Setting:"
      Write-Host $runtimeSettings
      New-Item -Path $(Pipeline.Workspace)/AcceptanceTests-$(Build.BuildId) -Name parameters.runSettings -ItemType File -Value $runtimeSettings -Force | Out-Null
    displayName: Set Runtime Settings

  - task: DotNetCoreCLI@2
    displayName: Verify .NET Version
    inputs:
      testRunTitle: Acceptance Tests
      command: custom
      custom: --version
      
  - powershell: |
      Write-Host "Swapping appsettings.json"
      Rename-Item -Path $(Pipeline.Workspace)/AcceptanceTests-$(Build.BuildId)/appsettings.json -NewName $(Pipeline.Workspace)/AcceptanceTests-$(Build.BuildId)/appsettings.json.old
      Rename-Item -Path $(Pipeline.Workspace)/AcceptanceTests-$(Build.BuildId)/appsettings.sds.json -NewName $(Pipeline.Workspace)/AcceptanceTests-$(Build.BuildId)/appsettings.json
    displayName: Swap appsettings files

  - ${{ each setting in parameters.acceptanceTestSettings }}:
    - ${{ if eq(setting.secret, true) }}:
      - template: ../../templates\Azure\KeyVault\get-secret.yaml
        parameters:
          azureSubscription: ${{ parameters.azureSubscription }}
          keyVaultName: ${{ setting.keyVaultName }}
          secretKeyName: ${{ setting.value }}
          taskName: ${{ replace(setting.value, '-', '_') }}__${{ replace(setting.name, ':', '_') }}

  - template: replace-app-settings.yml
    parameters:
      app_settings_path: $(Pipeline.Workspace)/AcceptanceTests-$(Build.BuildId)/appsettings.json
      settings: 
        - ${{ each setting in parameters.acceptanceTestSettings }}:
          - name: ${{ setting.name }}
            ${{ if eq(setting.secret, true) }}:
              value: $(${{ replace(setting.value, '-', '_') }}__${{ replace(setting.name, ':', '_') }}.prop.value)
            ${{ if ne(setting.secret, true) }}:
              value: ${{ setting.value }}

  - powershell: |
      Invoke-WebRequest -Uri "https://chromedriver.storage.googleapis.com/107.0.5304.62/chromedriver_win32.zip" -OutFile $(Pipeline.Workspace)/chromedriver_win32.zip -Force;
      Expand-Archive $(Pipeline.Workspace)/chromedriver_win32.zip -DestinationPath $(Pipeline.Workspace)/chromedriver_win32 -Force;
      Copy-Item $(Pipeline.Workspace)/chromedriver_win32/chromedriver.exe -Destination $(Pipeline.Workspace)/AcceptanceTests-$(Build.BuildId) -Force;
    displayName: Download Chrome Driver

  # - powershell: |
  #     $chromeDriver=$(where.exe chromedriver)
  #     Copy-Item $chromeDriver "$(Pipeline.Workspace)/AcceptanceTests-$(Build.BuildId)" -Force
  #   displayName: Copy Chrome Driver

  - task: PublishBuildArtifacts@1
    displayName: Publish Acceptance Tests
    inputs:
      PathtoPublish: $(Pipeline.Workspace)/AcceptanceTests-$(Build.BuildId)
      ArtifactName: AcceptanceTestsAppSettings

  - task: DotNetCoreCLI@2
    displayName: Run Acceptance Tests
    inputs:
      command: test
      projects: "$(Pipeline.Workspace)/AcceptanceTests-$(Build.BuildId)/*.AcceptanceTests.dll"
      publishTestResults: true
      ${{ if eq(parameters.testFilterCriteria, '' ) }}:
        arguments: --settings $(Pipeline.Workspace)/AcceptanceTests-$(Build.BuildId)/parameters.runSettings --logger console
      ${{ else }}: 
        arguments: --settings $(Pipeline.Workspace)/AcceptanceTests-$(Build.BuildId)/parameters.runSettings --logger console --filter ${{ parameters.testFilterCriteria }}

  # - powershell: |
  #     if([string]::IsNullOrEmpty($env:testFilterCriteria)) {
  #       dotnet vstest $(Pipeline.Workspace)/AcceptanceTests-$(Build.BuildId)/*.AcceptanceTests.dll --Logger:trx --ResultsDirectory:$(Agent.TempDirectory)/TestResults --settings:$(Pipeline.Workspace)/AcceptanceTests-$(Build.BuildId)/parameters.runSettings --logger:console
  #     } 
  #     else {
  #       dotnet vstest $(Pipeline.Workspace)/AcceptanceTests-$(Build.BuildId)/*.AcceptanceTests.dll --Logger:trx --ResultsDirectory:$(Agent.TempDirectory)/TestResults --settings:$(Pipeline.Workspace)/AcceptanceTests-$(Build.BuildId)/parameters.runSettings --TestCaseFilter:${{ parameters.testFilterCriteria }} --logger:console
  #     }

  #     # $retry = 1
  #     # do {
  #     #   $testFiles = (Get-ChildItem '$(Agent.TempDirectory)/TestResults' | Sort-Object LastWriteTime | Select-Object -last 1).FullName

  #     #   $failedTests = (Select-Xml -Path $testFiles -XPath "//ns:UnitTestResult[@outcome='Failed']/@testName" -Namespace @{"ns"="http://microsoft.com/schemas/VisualStudio/TeamTest/2010"}).Node.Value

  #     #   if($failedTests.count -gt 0) {
  #     #     write-warning "There are currently $($failedTests.count) failing tests, retrying for $retry times in 10 seconds"
  #     #     Start-Sleep 10
  #     #     dotnet vstest $(Pipeline.Workspace)/AcceptanceTests-$(Build.BuildId)/*.AcceptanceTests.dll /Logger:trx --ResultsDirectory:$(Agent.TempDirectory)/TestResults --settings:$(Pipeline.Workspace)/AcceptanceTests-$(Build.BuildId)/parameters.runsettings /Tests:"$($failedTests -join ',')" --logger:console
  #     #   }
  #     # } while ($failedTests.count -gt 0 -and $retry++ -lt 2)
  #   displayName: Run Acceptance Tests
  #   env:
  #     testFilterCriteria: ${{ parameters.testFilterCriteria }}
  #     ${{ each setting in parameters.acceptanceTestSettings }}:
  #       ${{ setting.name }}: ${{ setting.value }}

  # - task: PublishTestResults@2
  #   displayName: Publish Test Results
  #   condition: succeededOrFailed()
  #   inputs:
  #     testResultsFormat: VSTest
  #     testResultsFiles: '**/*.trx'
  #     searchFolder: $(Agent.TempDirectory)/TestResults
  #     mergeTestResults: true
  #     testRunTitle: Acceptance Tests