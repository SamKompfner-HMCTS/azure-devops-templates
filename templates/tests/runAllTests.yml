parameters:
  buildConfiguration: '' # used in DotNetCoreCLI tasks
  coverletCoverageExclusions: ''
  integrationTestsAppSettingsTransform: ''
  dalWorkingDirectory: ''


steps:
  - task: sergeyzwezdin.magic-chunks.magic.chunks.MagicChunks@2
    displayName: 'Transform App Settings'
    condition: ne(variables['integrationTestsAppSettingsTransform'], '')
    inputs:
      sourcePath: '*/*/appsettings.json'
      sourcePathRecurse: true
      transformations: |  
       {
        ${{ parameters.integrationTestsAppSettingsTransform }}
       }
     

  - powershell: |
      write-verbose "fetching installed tools" -verbose
      $tools = dotnet tool list --global
      write-verbose "$($tools | convertto-json)" -verbose
      
      if(($tools -match '^dotnet-ef\s').count > 0) {
        write-verbose "installing dotnet-ef" -verbose
        dotnet tool install --global dotnet-ef
      } else {
        write-verbose "updating dotnet-ef" -verbose
        dotnet tool update --global dotnet-ef
      }
    failOnStderr: true
    displayName: 'Install dotnet-ef'
    condition: ne(variables['dalWorkingDirectory'], '')
    
  - script: |
      echo "dropping db"
      dotnet ef database drop --force -v
      echo "updateing db"
      dotnet ef database update -v
    workingDirectory: ${{ parameters.dalWorkingDirectory}}
    failOnStderr: true
    displayName: 'Clear LocalDB'
    condition: ne(variables['dalWorkingDirectory'], '')

  - task: DotNetCoreCLI@2
    displayName: Run all test projects
    inputs:
      command: test
      projects: |
        **/*[Tt]ests/*.csproj
        !**/*Acceptance[Tt]ests/*.csproj
      arguments: '--configuration ${{ parameters.buildConfiguration}} --no-build /p:CollectCoverage=true /p:CoverletOutputFormat="\"opencover,cobertura,json,lcov\"" /p:Exclude="\"${{ parameters.coverletCoverageExclusions }}\"" /p:CoverletOutput=$(Common.TestResultsDirectory)\Coverage\ /p:MergeWith=$(Common.TestResultsDirectory)\Coverage\coverage.json'
  
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Common.TestResultsDirectory)\Coverage\coverage.cobertura.xml'
      reportDirectory: '$(Common.TestResultsDirectory)\Coverage'
      failIfCoverageEmpty: true
