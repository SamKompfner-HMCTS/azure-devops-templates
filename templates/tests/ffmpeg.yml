parameters:
  - name: application
    type: string
  - name: source
    type: string
  - name: streamName
    type: string
  - name: subscriptionName
    type: string
  - name: storageAccount
    type: string
  - name: storageContainer
    type: string

steps:
  - powershell: |
      $source="https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip"

      $currentPath=Get-Location
      $downloadPath="$currentPath/download"
      if ((Test-Path -Path $downloadPath) -eq $false) {
        Write-Host "Creating $downloadPath"
        mkdir $downloadPath 
      }
      $zipFile = "$downloadPath/$(Split-Path -Path $source -Leaf)" 

      ## DOWNLOAD FFMPEG
      if ((Test-Path -Path $zipFile) -eq $false) {
        Write-Host "Downloading $source"
        Write-Host "To $zipFile"
        Invoke-WebRequest -Uri $source -OutFile $zipFile 
      }

      ## EXTRACT PROGRAM
      $children=Get-ChildItem -Path $downloadPath -Directory
      if ($children.length -lt 1) {
        Expand-Archive -LiteralPath $zipFile -DestinationPath $downloadPath
      }

      ##PATH
      $tries=0
      $max=5
      while ($children.length -lt 1){
        if ($tries -eq $max){
          break;
        }
        if ($children.length -lt 1) {
          $tries++
          Write-Host "Not found folder yet"
          Start-Sleep -Seconds 5
          $children = Get-ChildItem -Path $downloadPath -Directory
          continue;
        } else {
          break;
        }
      }

      $ffmpegPath = "$downloadPath/$($children[0].name)/bin"
      Write-Host "##vso[task.setvariable variable=path;isOutput=true]$ffmpegPath"
    displayName: Download FFMPEG
    name: ffmpeg

  - powershell: |
      $source="https://filesamples.com/samples/video/mp4/sample_640x360.mp4"
      
      $currentPath=Get-Location
      $downloadPath="$currentPath/audio"
      if ((Test-Path -Path $downloadPath) -eq $false) {
        mkdir $downloadPath 
      }
      $output="$downloadPath/audio-example.mp4"

      ## DOWNLOAD AUDI
      if ((Test-Path -Path $output) -eq $false) {
        Invoke-WebRequest -Uri $source -OutFile $output 
      }

      Write-Host "##vso[task.setvariable variable=path;isOutput=true]$output"
    displayName: Download Audio Sample
    name: audio
  
  - powershell: |
      $ffmpegPath="$($env:ffmpegPath)"
      $application="$($env:application)"
      $audioFilePath="$($env:audioPath)"
      $fileName="$($env:streamName)"
      $source="$($env:source)"
 
      $ffmpeg_url="rtmps://$source`:443/$application/$fileName"

      Write-Host "FFMPEG Path: $ffmpegPath"
      Write-Host "URL: $ffmpeg_url"
      Write-Host "Audio Path: $audioFilePath"
      Set-Location -Path $ffmpegPath

      $current=Get-Location
      Get-ChildItem -Path $current

      ./ffmpeg.exe -re -i $audioFilePath -c copy -f flv "$ffmpeg_url flashver=FMLE/3.0\20(compatible;\20FMSc/1.0) live=true pubUser=wowza title=$fileName" -loglevel verbose 2> "$ffmpegPath/output.txt"

      Write-Host "FFMPEG Output"
      Write-Host $(Get-Content -Path "$ffmpegPath/output.txt")
    env:
      ffmpegPath: $(ffmpeg.path)
      audioPath: $(audio.path)
      application: ${{ parameters.application }}
      source: ${{ parameters.source }}
      streamName: ${{ parameters.streamName }}
    displayName: Run FFMPEG

  - task: AzureCLI@2
    displayName: Validate Stream ${{ parameters.streamName }}
    inputs:
      azureSubscription: '${{parameters.subscriptionName}}'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        $containerName = "${{ parameters.storageContainer }}"
        $folderLocation = "${{ parameters.application }}"
        $streamName = "${{ parameters.streamName }}"
        $accountName = "${{ parameters.storageAccount }}"

        $blobSearch = "$folderLocation/$streamName"
        Write-Host "Searching for $blobSearch in Container:$containerName in Storage Account:$accountName"

        $blobs = az storage blob list -c $containerName --prefix $blobSearch --account-name $accountName --only-show-errors -o json | ConvertFrom-Json

        $completed = $true
        if ($blobs.Length -lt 1) {
          Write-Host "task.LogIssue type=error;]FAILED - No recordings found"
          $completed = $false
        }
        else {

          $recording = $blobs[0];

          if ($recording.properties.contentLength -lt 1) {
            Write-Host "task.LogIssue type=error;]FAILED - Recording size is 0"
            $completed = $false
          }
        }

        if ($completed -eq $true) {
          Write-Host '##vso[task.complete result=Succeeded;]DONE'
        }
        else {
          Write-Host '##vso[task.complete result=Failed;]FAILED'
        }