parameters:
  - name: privateKeyFileName
    type: string
  - name: appId
    type: string


steps:
  - task: DownloadSecureFile@1
    name: secureFileDownload
    displayName: 'Download ${{ parameters.privateKeyFileName }}'
    inputs:
      secureFile: '${{ parameters.privateKeyFileName }}'
  
  - bash: |
      private_key_file_path="${private_key_file_path}"
      app_id="${appId}"

      private_key=$(cat $private_key_file_path)

      # Shared content to use as template
      header='{
          "alg": "RS256",
          "typ": "JWT"
      }'
      payload_template='{}'

      build_payload() {
              jq -c \
                      --arg iat_str "$(date +%s)" \
                      --arg app_id "${app_id}" \
              '
              ($iat_str | tonumber) as $iat
              | .iat = $iat
              | .exp = ($iat + 300)
              | .iss = ($app_id | tonumber)
              ' <<< "${payload_template}" | tr -d '\n'
      }

      b64enc() { openssl enc -base64 -A | tr '+/' '-_' | tr -d '='; }
      json() { jq -c . | LC_CTYPE=C tr -d '\n'; }
      rs256_sign() { openssl dgst -binary -sha256 -sign <(printf '%s\n' "$1"); }

      sign() {
          local algo payload sig
          algo=${1:-RS256}; algo=${algo^^}
          payload=$(build_payload) || return
          signed_content="$(json <<<"$header" | b64enc).$(json <<<"$payload" | b64enc)"
          sig=$(printf %s "$signed_content" | rs256_sign "$private_key" | b64enc)
          printf '%s.%s\n' "${signed_content}" "${sig}"
      }

      token=sign
      echo "##vso[task.setvariable variable=token;isOutput=true]$token"

    displayName: Get Github App Token
    name: githubapp
    env:
      private_key_file_path: $(secureFileDownload.secureFilePath)
      app_id: ${{ parameters.appId }}
