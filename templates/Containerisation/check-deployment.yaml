parameters:
  - name: requiredImage
    type: string
  - name: namespace
    type: string
  - name: deploymentName
    type: string
  - name: waitSeconds
    type: number
    default: 30
  - name: retries
    type: number
    default: 5
  - name: subscriptionName
    type: string
  - name: env
    type: string

steps:
  - task: AzureCLI@2
    displayName: "Check and wait for deployments to finish"
    name: checkAKS
    inputs:
      azureSubscription: ${{ parameters.subscriptionName }}
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $ns = "${{ parameters.namespace }}"
        $prefix = "${{ parameters.deploymentName }}"
        $imageName = "${{ parameters.requiredImage }}"
        $sleep = "${{ parameters.waitSeconds }}"
        $retries = "${{ parameters.retries }}"

        Write-Host "ns: $ns"
        Write-Host "prefix: $prefix"
        Write-Host "imageName: $imageName"
        Write-Host "sleep: $sleep"
        Write-Host "retries: $retries"

        function Get-Pods {
            param (
                $ns,
                $prefix
                )
                
                $pods = kubectl -n $ns get pods -o json | ConvertFrom-Json
                $outPods = @()
                foreach ($pod in $pods.items) {
                    if ($($pod.metadata.name) -match "^$prefix-[0-9a-z]{5,}-[0-9a-z]{5}$"){
                        Write-Host "Found POD '$($pod.metadata.name)'"
                        $outPods += @{  
                            "PodName" = $pod.metadata.name
                            "Image" = $pod.spec.containers.image
                            "podStatus" = $pod.status.phase 
                            "containerStatuses" = $pod.status.containerStatuses
                        }
                    }
                }
                return $outPods
            }

        function Get-Deployment {
            param (
                $ns,
                $depName
                )
                
                $deployment = kubectl -n $ns get deployments $depName -o json | ConvertFrom-Json
                if ($deployment) {
                    return @{  
                        "deploymentName" = $deployment.metadata.name
                        "replicasRequired" = $deployment.spec.replicas
                        "availableReplicas" = $deployment.status.availableReplicas
                        "readyReplicas" = $deployment.status.readyReplicas
                    }
                } else {
                    return $false
                }
            }

        function Test-Deployments {
            param (
                $ns,
                $depName
                )
            $deployment = Get-Deployment $ns $depName
            if ($deployment) {
                write-host "Deployment: $($deployment.deploymentName) replicasRequired:$($deployment.replicasRequired) availableReplicas:$($deployment.availableReplicas) readyReplicas:$($deployment.readyReplicas)"
                if (($deployment.replicasRequired -eq $deployment.availableReplicas) -and ($deployment.replicasRequired -eq $deployment.readyReplicas) ) {
                    return $true
                }
                write-Host "Not all PODs in deployments are in ready state"
                return $false
            }
            write-Host "No deployment found called '$depName'"
            return $false
        }

        function Test-Pods {
            param (
                $ns,
                $imageName,
                $prefix
            )
            $pods = Get-Pods $ns $prefix
            $hasError = $false
            $podCount = 0
            foreach ($pod in $pods) {
                Write-Host "`nChecking '$($pod.PodName)' Image:$($pod.Image) Status:$($pod.podStatus)" 
                if ($pod.Image -eq $imageName) { # Get all pods with new image
                    write-Host "POD found, checking its running.."
                    if($pod.podStatus -eq "Running"){
                        write-Host "POD running, checking its containers.."
                        foreach ($containerStatus in $pod.containerStatuses) {
                            Write-Host "Checking container '$($containerStatus.containerID)' Started:$($containerStatus.started) Ready:$($containerStatus.ready)"
                            if (($containerStatus.started) -and ($containerStatus.ready)) {
                                $podCount ++
                            } else {
                                write-Host "POD has new image but one of the containers has not started or is not running"
                                $hasError = $true
                            }
                        }
                    } else {
                        write-Host "POD has new image but is not running" 
                        $hasError = $true
                    }
                } else {
                    write-Host "POD does not have new image" 
                }
            }
            if ($hasError -or ($podCount -eq 0)) {return $false} else {return $true}
        }

        function Get-Clusters {
            param (
                $env
            )

            $clusters = az aks list --query "[].{Name:name, rg:resourceGroup}" | ConvertFrom-Json
            $returnedClusters = @()
            foreach ($cluster in $clusters) {
                if ($cluster.Name -match "^ss-$env-[0-9]{2}-aks$") {
                    $returnedClusters += @{
                        "rg" = $cluster.rg
                        "name" = $cluster.name
                    }
                }
            }
            return $returnedClusters
        }


        ### FUNCTIONS END ###

        ### The main logic
        $podsRunning = 0
        $clutersFound = 0
        $clusters = Get-Clusters $env
        foreach ($cluster in $clusters) {
            Write-Host "`n========================================================"
            Write-Host "Login to AKS cluster '$($cluster.name)'"
            Write-Host "========================================================"

            az aks get-credentials --resource-group $cluster.rg --name $cluster.name -a
            $context = kubectl config current-context
            Write-Host "Logged in to cluster with context '$context'"
            $clutersFound ++

            $i = 0

            do {
                $i ++
                Write-Host "`nRunning Checks '$($cluster.rg)/$($cluster.name)' ($i/$retries)" 
                Write-Host "--------------------------------------------------------"
                Write-Host "`nChecking deployments..." 
                if (Test-Deployments $ns $prefix) {
                    Write-Host "`nChecking PODs..." 
                    if(Test-Pods $ns $imageName $prefix) {
                        Write-Host "`nDeployment completed, image is available"
                        $podsRunning ++
                        break;
                    } 
                    Write-Host "`nWaiting $sleep seconds..." 
                    Start-Sleep -Seconds $sleep
                }
            } until ($i -eq $retries)
        }

        if($clusters){
            if($podsRunning -eq $clutersFound) {
                Write-Host "`nImage available in all clusters"
                Exit 0
            } else {
                Write-Host "`nTimed out before new image was available"
                Exit 1
            }
        } else {
            Write-Host "`nNo clusters found in subscription"
            Exit 1
        }