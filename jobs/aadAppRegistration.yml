
parameters:
  # build agent pool can be overwritten on build template level 
  pool: 'Azure-VSTS-VS2017'
  azureSubscription: ''
  productionAzureSubscription: 'DCD-CFT-VH-Pilot'

  appName: 'vh-app-api' # name of the app to be registered
  keyVaultName: 'vhcoreinfraht$(environmentName)' # key vault name to for storing AAD app's details - appId, ClientSecret, etc.
  resourceGroupName: '$(appName)-$(environmentName)' # resource group name for where the website is located
  AppServicePlanName: 'vh-core-infra-$(environmentName)' # App Service Plan name
  WebSiteName: $(appName)-$(environmentName)  # Web Site name
  CustomHostname: $(WebSiteName)$(AzureAppServiceWebSiteCustomDomainName) # custom hostname used by the website
  aadAppReplyUrls: '' #CSV list of replay urls
  allowedEnvironments: "preview, sandbox, aat, test1, test2, pilot, production"
  productionLikeEnvironments: "aat, pilot, production"

jobs:
- job: Register_AAD_App
  displayName: 'Register AAD App'
  pool: Azure-VSTS-VS2017

  # Reference templae for setting up build tools
  steps:
  - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
    clean: true  # whether to fetch clean each time

  - task: GitVersion@4
    displayName: GitVersion
    inputs:
      preferBundledVersion: false

  - powershell: | 
      # Check if the input environment name is one of the allowe d environmants.
      if ('${{ parameters.allowedEnvironments }}' -match '$(environmentName)') {Write-Host "Variable validation successful!"}
      else {
        Write-Error ("Variable validation failed! Please check if environment {0} is from allowed environmenst {1}" -f '$(environmentName)', '"${{ parameters.allowedEnvironments }}"')}
      
      # Check if if the build for production like environments is executed form a master brach.
      if ('refs/heads/master' -match '$(Build.SourceBranch)' -and '${{ parameters.productionLikeEnvironments }}' -match '$(environmentName)'){
      Write-Host ("Deploying from '{0}' to production like environment '{1}'..." -f '$(Build.SourceBranch)', '$(environmentName)')}

      elseif("refs/heads/master" -notmatch '$(Build.SourceBranch)' -and '${{ parameters.productionLikeEnvironments }}' -match '$(environmentName)'){
      Write-Error ("Deploying from '{0}' to non-production like environment '{1}'. Make sure you deploy from master branch to production like environments. " -f '$(Build.SourceBranch)', '$(environmentName)')}
      
      elseif("refs/heads/master" -match '$(Build.SourceBranch)' -and '${{ parameters.productionLikeEnvironments }}' -notmatch '$(environmentName)' -or "refs/heads/master" -notmatch '$(Build.SourceBranch)' -and '${{ parameters.productionLikeEnvironments }}' -notmatch '$(environmentName)'){
      Write-host ("Deploying from '{0}' to non-production like environment '{1}'..." -f '$(Build.SourceBranch)', '$(environmentName)')}
      else {
        Write-Error "Something went wrong! Please check your config and variables."}      
    displayName: 'Validate variables'

  - powershell: |
      # Check if deployment is targeting production (pilot) environment if so set the azure subscription to "DCD-CFT-VH-Pilot".
      if('$(environmentName)' -eq "pilot"){
        #Write-Host ("##vso[task.setvariable variable=azureSubscription;]DCD-CFT-VH-Pilot")
      Write-Host ("##vso[task.setvariable variable=vh_vsts_automation_AppId;]$(vh_vsts_automation_prod_AppId)")
      Write-Host ("##vso[task.setvariable variable=vh_vsts_automation_CertThumbprit;]$(vh_vsts_automation_CertThumbprit)")
      Write-Host ("##vso[task.setvariable variable=vh_azure_subscription_id;]$(vh_azure_subscription_id_prod)")}
      else {
      #  Write-Host ("##vso[task.setvariable variable=azureSubscription;]Reform-CFT-VH-Dev")
      Write-Host ("##vso[task.setvariable variable=vh_vsts_automation_AppId;]$(vh_vsts_automation_dev_AppId)")
      Write-Host ("##vso[task.setvariable variable=vh_vsts_automation_CertThumbprit;]$(vh_vsts_automation_dev_CertThumbprit)")
      Write-Host ("##vso[task.setvariable variable=vh_azure_subscription_id;]$(vh_azure_subscription_id_dev)")}

    displayName: 'Set Azure Subscription'

  - powershell: |
      $var = (gci env:*).GetEnumerator() | Sort-Object Name
      $out = ""
      Foreach ($v in $var) {$out = $out + "`t{0,-28} = {1,-28}`n" -f $v.Name, $v.Value}
      
      Write-Host "dump variables on $env:BUILD_ARTIFACTSTAGINGDIRECTORY\test.md"
      $fileName = "$env:BUILD_ARTIFACTSTAGINGDIRECTORY\test.md"
      set-content $fileName $out
      Write-Host $out
      Write-Host "##vso[task.addattachment type=Distributedtask.Core.Summary;name=Environment Variables;]$fileName"
    condition: succeededOrFailed()
    displayName: 'Output all variables'


  - powershell: |
     git clone https://github.com/hmcts/vh-ps-modules.git
    #  cd .\vh-ps-modules\
    #  git checkout updated-dns-module
    displayName: 'Get PowerShell module source'

  - powershell: | 
      #Get-ChildItem -Recurse
      Install-Module AzureAD
      Install-Module AzureRM.KeyVault
      Copy-Item -Path $(System.DefaultWorkingDirectory)/*vh-ps-modules/AzureADApplicationRegistration -Destination "C:\Program Files\WindowsPowerShell\Modules" -Recurse -Force
      Copy-Item -Path $(System.DefaultWorkingDirectory)/*vh-ps-modules/SetDNSRecord -Destination "C:\Program Files\WindowsPowerShell\Modules" -Recurse -Force
    displayName: 'Import PowerShell Modules'

  - powershell: | 
     Invoke-AzureADApplicationRegistration `
     -AzureTenantId '$(vh_teantid)' `
     -AzureAdAppId $env:vh_vsts_automation_AppId `
     -AzureAdAppCertificateThumbprint $env:vh_vsts_automation_CertThumbprit `
     -AzureSubscriptionId $env:vh_azure_subscription_id `
     -AzureADApplicationName '${{ parameters.appName }}-$(environmentName)' `
     -AzureKeyVaultName '${{ parameters.keyVaultName }}' `
     -AzureTenantIdSecondary '$(vh_hearings_tenata_id)' `
     -AzureAdAppIdSecondary '$(vh_hearings_vsts_automation_AppId)' `
     -AzureAdAppCertificateThumbprintSecondary '$(vh_hearings_vsts_automation_CertThumbprit)' `
     -verbose
    displayName: 'Register AAD App'

  - powershell: |
      if ( Test-Path .\resourceAccess.json) {
      Invoke-AzureADConnection -AzureTenantIdSecondary '$(vh_hearings_tenata_id)' `
          -AzureAdAppIdSecondary '$(vh_hearings_vsts_automation_AppId)' `
          -AzureAdAppCertificateThumbprintSecondary '$(vh_hearings_vsts_automation_CertThumbprit)'
          
      Set-AzureADResourceAccessV2 -AzureADApplicationName '${{ parameters.appName }}-$(environmentName)' `
      -resourceAccessDefinition .\resourceAccess.json}
      else {Write-Host "##vso[task.logissue type=warning]Resource Access file not found! Please add 'resourceAccess.json' file to the repo" }
    displayName: 'Add AAD Apps Resource Access'

  - powershell: | 
      Set-AzureADApplicationReplyUrls `
      -AzureTenantIdSecondary '$(vh_hearings_tenata_id)' `
      -AzureAdAppIdSecondary '$(vh_hearings_vsts_automation_AppId)' `
      -AzureAdAppCertificateThumbprintSecondary '$(vh_hearings_vsts_automation_CertThumbprit)' `
      -AADAppName "${{ parameters.appName }}-$(environmentName)" `
      -AADAppReplyUrls "${{ parameters.aadAppReplyUrls }}"
    displayName: 'Set AAD App Replay URLs'

  - task: AzurePowerShell@3
    displayName: 'Set DNS records for web app'
    inputs:
      azureSubscription: 'DCD-CFT-VH-Pilot'
      azurePowerShellVersion: LatestVersion
      ScriptType: InlineScript
      Inline: |
        Set-AzureRmDnsRecord -WebSiteName "${{ parameters.appName }}-$(environmentName)" `
        -AzureAppServiceWebSiteDomainName "$(AzureAppServiceWebSiteDomainName)" `
        -AzureResourceGroupName "$(AzureResourceGroupName)" `
        -AzureDNSZoneName "$(AzureDNSZoneName)"

  - template: ../templates/azureResourceGroupDeployment/azureResourceGroupDeployment.yml # Template reference
    parameters:
      resourceGroupName: ${{ parameters.resourceGroupName }}
      appServicePlanName: ${{ parameters.AppServicePlanName }}
      webSiteName: $(WebSiteName)
      customHostname: ${{ parameters.CustomHostname }}
      wildcardCertificateThumbprint: $(WildcardCertificateThumbprint)
  
