parameters:
  vstsFeedId: '0bb8fdf9-08cc-423c-8a96-81a1e4d65711'
  pool: 'Azure-VSTS-VS2017'
  cleanCheckout: 'false'
  azureSubscription: 'Reform-CFT-VH-Dev'
  buildConfiguration: 'Release'
  sonarCloudProjectKey: ''
  sonarCloudextraProperties: ''
  coverletCoverageExclusions: ''
  integrationTestsAppSettingsTransform: ''
  solutionType: ''
  KeyVaultName: ''
  SecretsFilter: ''
  
jobs:
- job: 
  displayName: 'Build & Test Java Script and .Net Core'
  pool: ${{ parameters.pool }}

  # Reference templae for setting up build tools
  steps:
  - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
    clean: ${{ parameters.cleanCheckout }}  # whether to fetch clean each time
  - template: ../templates/common/common.yml

# Performs npm steps - install, build, test, test publishing
  - template: ../templates/npm/npm.yml

# SonarCloud Prepare step
  - template: ../templates/sonarCloud/sonarCloudPrepare.yml
    parameters:
       sonarCloudProjectKey: ${{ parameters.sonarCloudProjectKey }}
       sonarCloudprojectName: '$(Build.Repository.Name)'
       sonarCloudextraProperties: ${{ parameters.sonarCloudextraProperties }}

# Restore NuGet packages and build VS solution
  - template: ../templates/vsBuild/dotnetBuild.yml
    parameters:
      buildConfiguration: '${{ parameters.buildConfiguration }}'

# Get secrets from Key Vault
  - template: ../templates/getSecrets/getSecrets.yml
    parameters:
        azureSubscription: '${{ parameters.azureSubscription }}'
        KeyVaultName: '${{ parameters.KeyVaultName }}'
        SecretsFilter: '${{ parameters.SecretsFilter }}'

  # Executes unit tests
  - template: ../templates/tests/runAllTests.yml
    parameters:
      buildConfiguration: '${{ parameters.buildConfiguration }}'
      integrationTestsAppSettingsTransform: '${{ parameters.integrationTestsAppSettingsTransform }}'
      coverletCoverageExclusions: '${{ parameters.coverletCoverageExclusions }}'
      dalWorkingDirectory: '${{ parameters.dalWorkingDirectory }}'

  - task: DotNetCoreCLI@2
    displayName: Publish
    inputs:
      command: publish
      publishWebProjects: false
      arguments: '--configuration ${{ parameters.buildConfiguration }} --output $(build.artifactstagingdirectory)\WebApp --no-build'
      zipAfterPublish: True
      workingDirectory: '${{ parameters.apiDirectory }}'

# Executes tests and publishes results
  - template: ../templates/sonarCloud/sonarCloudRunAnalysis.yml

# Publish artifacts
  - template: ../templates/publishArtifacts/publishArtifacts.yml
